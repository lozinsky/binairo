name: Build and vercel deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'

permissions:
  contents: read

concurrency:
  group: 'vercel-deploy'
  cancel-in-progress: false

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build-and-vercel-deploy:
    name: Build and vercel deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        uses: ./.github/actions/prepare

      - name: Build
        run: |
          mkdir -p .vercel/output
          mkdir -p .vercel/output/static
          mkdir -p .vercel/output/functions/index.func

          cat > app/entry.server.tsx << EOF
          import { RemixServer } from '@remix-run/react';
          import { type EntryContext, handleRequest } from '@vercel/remix';

          export default function (
            request: Request,
            responseStatusCode: number,
            responseHeaders: Headers,
            remixContext: EntryContext,
          ) {
            const remixServer = <RemixServer context={remixContext} url={request.url} />;

            return handleRequest(request, responseStatusCode, responseHeaders, remixServer);
          }
          EOF

          cat > index.js << EOF
          import { createRequestHandler } from '@remix-run/node';

          import * as build from './build/server/index.js';

          export default createRequestHandler(build, process.env.NODE_ENV);
          EOF

          cat > .vercel/output/config.json << EOF
          {
            "version": 3,
            "routes": [
              { "src": "^/assets/(.*)$", "headers": { "cache-control": "public, immutable, max-age=31536000" } },
              { "handle": "filesystem" },
              { "src": ".*", "dest": "/" }
            ]
          }
          EOF

          cat > .vercel/output/functions/index.func/.vc-config.json << EOF
          {
            "runtime": "edge",
            "entrypoint": "index.js"
          }
          EOF

          npm run build

          cp -r build/client/. .vercel/output/static
          rm -rf .vercel/output/static/.vite

          npx esbuild index.js --outfile=.vercel/output/functions/index.func/index.js --define:process.env.NODE_ENV='"production"' --alias:@remix-run/node=@vercel/remix --bundle --minify --format=esm

      - name: Setup Vercel
        run: npm i -g vercel@33.1.0

      - name: Vercel deploy
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
